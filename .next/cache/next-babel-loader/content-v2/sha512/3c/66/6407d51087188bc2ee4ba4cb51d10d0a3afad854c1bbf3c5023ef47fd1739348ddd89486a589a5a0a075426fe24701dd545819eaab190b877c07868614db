{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/pietro/Programming/asd/src/contexts/LevelingContext.tsx\";\nimport React, { useState, createContext } from 'react';\nexport const LevelingContext = /*#__PURE__*/createContext({});\nexport function LevelingProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: render,\n    1: setRender\n  } = useState(4);\n  const {\n    0: points,\n    1: setPoint\n  } = useState(0);\n\n  function getIsMatch(isMatch) {\n    if (isMatch === true) {\n      setTimeout(() => {\n        setLevel(level + 1);\n        setRender(render + 4);\n        isMatch = false;\n      }, 2000);\n      setPoints(points);\n    } else if (isMatch === false) {\n      console.log('False');\n    }\n  }\n\n  function setPoints(points) {\n    setPoint(points);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LevelingContext.Provider, {\n    value: {\n      level,\n      render,\n      points,\n      setPoints,\n      getIsMatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/home/pietro/Programming/asd/src/contexts/LevelingContext.tsx"],"names":["React","useState","createContext","LevelingContext","LevelingProvider","children","level","setLevel","render","setRender","points","setPoint","getIsMatch","isMatch","setTimeout","setPoints","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA0D,OAA1D;AAcA,OAAO,MAAMC,eAAe,gBAAGD,aAAa,CAAC,EAAD,CAArC;AAEP,OAAO,SAASE,gBAAT,CAA0B;AAAEC,EAAAA;AAAF,CAA1B,EAA+D;AAElE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAS,CAAT,CAAlC;AACA,QAAM;AAAA,OAACO,MAAD;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAS,CAAT,CAApC;AACA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAqBV,QAAQ,CAAS,CAAT,CAAnC;;AAEA,WAASW,UAAT,CAAoBC,OAApB,EAAsC;AAClC,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AAClBC,MAAAA,UAAU,CAAC,MAAM;AACbP,QAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACAG,QAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACAK,QAAAA,OAAO,GAAG,KAAV;AACH,OAJS,EAIP,IAJO,CAAV;AAKAE,MAAAA,SAAS,CAACL,MAAD,CAAT;AACH,KAPD,MAOO,IAAIG,OAAO,KAAK,KAAhB,EAAuB;AAC1BG,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ;;AAED,WAASF,SAAT,CAAmBL,MAAnB,EAAmC;AAC/BC,IAAAA,QAAQ,CAACD,MAAD,CAAR;AACH;;AAED,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAC7BJ,MAAAA,KAD6B;AAE7BE,MAAAA,MAF6B;AAG7BE,MAAAA,MAH6B;AAI7BK,MAAAA,SAJ6B;AAK7BH,MAAAA;AAL6B,KAAjC;AAAA,cAOKP;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH","sourcesContent":["import React, { useState, createContext, ReactNode } from 'react'\n\ninterface LevelingContextData {\n    level: number;\n    points: number;\n    setPoints: (points: number) => void;\n    render: number;\n    getIsMatch: (isMatch: boolean) => void;\n}\n\ninterface LevelingProviderProps {\n    children: ReactNode;\n}\n\nexport const LevelingContext = createContext({} as LevelingContextData);\n\nexport function LevelingProvider({ children }: LevelingProviderProps) {\n\n    const [level, setLevel] = useState<number>(1);\n    const [render, setRender] = useState<number>(4);\n    const [points, setPoint] = useState<number>(0);\n\n    function getIsMatch(isMatch: boolean) {\n        if (isMatch === true) {\n            setTimeout(() => {\n                setLevel(level + 1);\n                setRender(render + 4);\n                isMatch = false;\n            }, 2000)\n            setPoints(points);\n        } else if (isMatch === false) {\n            console.log('False');\n        }\n    }\n\n    function setPoints(points: number) {\n        setPoint(points);\n    }\n\n    return (\n        <LevelingContext.Provider value={{\n            level,\n            render,\n            points,\n            setPoints,\n            getIsMatch,\n        }}>\n            {children}\n        </LevelingContext.Provider>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}