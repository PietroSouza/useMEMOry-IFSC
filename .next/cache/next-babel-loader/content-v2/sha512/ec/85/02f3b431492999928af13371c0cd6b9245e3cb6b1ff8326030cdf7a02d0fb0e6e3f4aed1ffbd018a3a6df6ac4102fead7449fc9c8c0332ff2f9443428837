{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/pietro/Programming/asd/src/contexts/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nexport var CountdownContext = /*#__PURE__*/createContext({});\nvar countdownTimeout;\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(15 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(true);\n    setHasFinished(false);\n    setTime(15 * 60);\n  }\n\n  function pauseCountdown() {\n    setIsActive(false);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown,\n      pauseCountdown: pauseCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CountdownProvider, \"ZU1ROxA5EZSN3njFcEvZ2pk4uFU=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/home/pietro/Programming/asd/src/contexts/index.tsx"],"names":["createContext","useEffect","useState","CountdownContext","countdownTimeout","CountdownProvider","children","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","pauseCountdown","setTimeout"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA8D,OAA9D;AAeA,OAAO,IAAMC,gBAAgB,gBAAGH,aAAa,CAAC,EAAD,CAAtC;AAEP,IAAII,gBAAJ;AAEA,OAAO,SAASC,iBAAT,OAAiE;AAAA;;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;;AAAA,kBAC5CJ,QAAQ,CAAC,KAAK,EAAN,CADoC;AAAA,MAC7DK,IAD6D;AAAA,MACvDC,OADuD;;AAAA,mBAEpCN,QAAQ,CAAC,KAAD,CAF4B;AAAA,MAE7DO,QAF6D;AAAA,MAEnDC,WAFmD;;AAAA,mBAG9BR,QAAQ,CAAC,KAAD,CAHsB;AAAA,MAG7DS,WAH6D;AAAA,MAGhDC,cAHgD;;AAKpE,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACtBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH;;AAED,WAASQ,cAAT,GAA0B;AACtBC,IAAAA,YAAY,CAACf,gBAAD,CAAZ;AACAM,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACH;;AAED,WAASY,cAAT,GAA0B;AACtBV,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH;;AAEDT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACtBH,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAChCb,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAF4B,EAE1B,IAF0B,CAA7B;AAGH,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,IAAI,CAAxB,EAA2B;AAC9BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,GATQ,EASN,CAACD,QAAD,EAAWF,IAAX,CATM,CAAT;AAYA,sBACI,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BM,MAAAA,OAAO,EAAPA,OAD8B;AAE9BG,MAAAA,OAAO,EAAPA,OAF8B;AAG9BL,MAAAA,WAAW,EAAXA,WAH8B;AAI9BF,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BQ,MAAAA,cAAc,EAAdA,cAL8B;AAM9BC,MAAAA,cAAc,EAAdA,cAN8B;AAO9BE,MAAAA,cAAc,EAAdA;AAP8B,KAAlC;AAAA,cASKd;AATL;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAjDeD,iB;;KAAAA,iB","sourcesContent":["import { createContext, ReactNode, useEffect, useState } from \"react\";\ninterface CountdownContextData {\n    minutes: number;\n    seconds: number;\n    hasFinished: boolean;\n    isActive: boolean;\n    startCountdown: () => void;\n    resetCountdown: () => void;\n    pauseCountdown: () => void;\n}\n\ninterface CountdownProviderProps {\n    children: ReactNode;\n}\n\nexport const CountdownContext = createContext({} as CountdownContextData)\n\nlet countdownTimeout: NodeJS.Timeout;\n\nexport function CountdownProvider({ children }: CountdownProviderProps) {\n    const [time, setTime] = useState(15 * 60);\n    const [isActive, setIsActive] = useState(false);\n    const [hasFinished, setHasFinished] = useState(false);\n\n    const minutes = Math.floor(time / 60);\n    const seconds = time % 60;\n\n    function startCountdown() {\n        setIsActive(true);\n    }\n\n    function resetCountdown() {\n        clearTimeout(countdownTimeout);\n        setIsActive(true);\n        setHasFinished(false);\n        setTime(15 * 60)\n    }\n\n    function pauseCountdown() {\n        setIsActive(false);\n    }\n\n    useEffect(() => {\n        if (isActive && time > 0) {\n            countdownTimeout = setTimeout(() => {\n                setTime(time - 1);\n            }, 1000)\n        } else if (isActive && time == 0) {\n            setHasFinished(true);\n            setIsActive(false);\n        }\n    }, [isActive, time])\n\n\n    return (\n        <CountdownContext.Provider value={{\n            minutes,\n            seconds,\n            hasFinished,\n            isActive,\n            startCountdown,\n            resetCountdown,\n            pauseCountdown\n        }}>\n            {children}\n        </CountdownContext.Provider>\n    )\n\n}"]},"metadata":{},"sourceType":"module"}